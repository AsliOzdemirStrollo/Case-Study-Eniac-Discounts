# -*- coding: utf-8 -*-
"""Copy of 5_quality_assessment_challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18UyM2HR4Fzh72PuOWT-15g2PnIe84Dls

# Quality Assessment
Now it's your turn. Follow the steps on the platform and use what you've learnt to see how reliable the data is.
"""

import pandas as pd

"""Load our cleaned DataFrames"""

# orders_cl.csv
url = "https://drive.google.com/file/d/1Tla62vfu__kCqvgypZyVt2S9VuC016yH/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
orders_cl = pd.read_csv(path)

# orderlines_cl.csv
url = "https://drive.google.com/file/d/1OhtkQS2fwOYdzfd-qPh7im35iLc-L9TA/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
orderlines_cl = pd.read_csv(path)

# products_cl.csv
url = "https://drive.google.com/file/d/1s7Lai4NSlsYjGEPg1QSOUJobNYVsZBOJ/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
products_cl = pd.read_csv(path)

orderlines_cl["date"] = pd.to_datetime(orderlines_cl["date"])

orderlines_cl.info()

"""## 1.&nbsp; Define Pandas display format"""

pd.options.display.max_rows = 10     # default is 10
pd.options.display.max_columns = 50    # default is 20
pd.options.display.max_colwidth = 50  # widen column text

orders_cl["created_date"] = pd.to_datetime(orders_cl["created_date"])

orders_cl.info()

[col for col in orderlines_cl.columns if 'product_id' in col]
orderlines_cl

"""## 2.&nbsp; Exclude unwanted orders"""

orders_cl.info()

#the orders which dont exist in orderlines
# Merge orders with orderlines using a left join
orders_merged = orders_cl.merge(orderlines_cl, left_on='order_id', right_on='id_order', how='left', indicator=True)

# Filter rows that are only in orders_cl
only_in_orders = orders_merged[orders_merged['_merge'] == 'left_only']

# Display result
only_in_orders

# Identify the order IDs to exclude
order_ids_to_remove = only_in_orders['order_id'].unique()

# Filter out those rows from orders_cl
excluded_orders_cl = orders_cl[~orders_cl['order_id'].isin(order_ids_to_remove)]
excluded_orders_cl

"""## 3.&nbsp; Exclude orders with unknown products

"""

products_cl

# Merge to find SKUs that don't exist in products_cl
merged = orderlines_cl.merge(products_cl, on='sku', how='left', indicator=True)

# Filter rows that are only in orderlines_cl (i.e., unmatched SKUs)
missing_skus = merged[merged['_merge'] == 'left_only']
missing_skus

# Get SKUs that are not in products
skus_to_exclude = missing_skus['sku'].unique()

# Filter out the invalid SKUs
excluded_orderlines_cl = orderlines_cl[~orderlines_cl['sku'].isin(skus_to_exclude)]
excluded_orderlines_cl

"""## 4.&nbsp; Explore the revenue from different tables

#### Step 1:
Create the `unit_price_total` as `orderlines.unit_price` * `orderlines.product_quantity`
"""

merged_excluded = excluded_orderlines_cl.merge(excluded_orders_cl,left_on='id_order',right_on='order_id',how='inner',indicator=True)
merged_excluded = merged_excluded.drop(columns=['order_id'])
merged_excluded

items_per_order = merged_excluded.groupby('id_order')['product_quantity'].sum().rename('total_items')
# Merge back into original DataFrame
merged_excluded_updated = merged_excluded.merge(items_per_order, on='id_order', how='left')
merged_excluded_updated

# Calculate unit_price_total by multiplying unit_price and total_items
merged_excluded_updated['unit_price_total'] = merged_excluded_updated['unit_price'] * merged_excluded_updated['total_items']
sorted_frame = merged_excluded_updated.sort_values(by='id_order', ascending=False)
#sorted_frame.tail(30)
sorted_frame

num_unique_ = merged_excluded_updated['id_order'].nunique()
print(f"Number of unique orders only in merged_excluded_updated: {num_unique_}")

"""#### Step 2:
Group by `id_order`, summarising by the sum of `unit_price_total`
"""

grouped = merged_excluded_updated.groupby('id_order')['unit_price_total'].sum().reset_index()
sorted_frame2 = grouped.sort_values(by='id_order', ascending=False)
#sorted_frame2.tail(30)
sorted_frame2

"""### What is the average difference between `total_paid` and `unit_price_total`?"""

#difference and create a clumn for print the difference
merged_excluded_updated['difference'] = merged_excluded_updated['total_paid'] - merged_excluded_updated['unit_price_total']

#average
average_difference = merged_excluded_updated['difference'].mean()

#percentage
percentage_difference = (average_difference / merged_excluded_updated['unit_price_total'].mean()) * 100

# Print result
print(f"The average difference is: {average_difference}")
print(f"The average difference as a percentage of unit_price_total is: {percentage_difference}%")

"""### What is the distribution of these differences?"""

merged_excluded_updated.difference.mean().round(2)

merged_excluded_updated.difference.hist(bins= 50, figsize=(8,6));

merged_excluded_updated['difference'].describe()



import matplotlib.pyplot as plt
import seaborn as sns

# Plot the distribution of differences
plt.figure(figsize=(10, 12))
sns.histplot(merged_excluded_updated['difference'], kde=True, bins=30)
# Customize
plt.title('Distribution of Differences between Total Paid and Unit Price Total')
plt.xlabel('Difference (Total Paid - Unit Price Total)')
plt.ylabel('Frequency')
plt.show()

merged_excluded_updated['difference'].hist()

"""### Can all the differences be explained by shipping costs? If not, what are other plausible explanations?"""

#print them in column
merged_excluded_updated['difference_type'] = 'none'

merged_excluded_updated.loc[merged_excluded_updated['difference'] > 0, 'difference_type'] = 'delivery_cost'

merged_excluded_updated.loc[merged_excluded_updated['difference'] < 0, 'difference_type'] = 'promotion'

#to column
print(merged_excluded_updated['difference_type'].value_counts())

"""### If there are differences that you canâ€™t explain: what should you do with these orders?"""

#
merged_full = merged_excluded_updated.merge(products_cl, on='sku', how='left')
merged_full = merged_full.drop(columns=['product_id'], errors='ignore')
merged_full

merged_full['price_total'] = merged_full['total_items'] * merged_full['price']
merged_full

# in case of promotion it must be total_paid < price_total (total_items *price).
# difference is total_paid - unit_price_total

condition = (merged_full['difference'] < 0) & (merged_full['total_paid'] >merged_full['price_total'])&(merged_full['total_items'] < 2)

promotion_anomalies = merged_full[condition]

print(f"Number of rows where 'promotion' and total_paid < price_total: {len(promotion_anomalies)}")
promotion_anomalies

# in case of promotion it must be total_paid < price_total (total_items *price).
# difference is total_paid - unit_price_total

condition = (merged_full['difference'] < 0) & (merged_full['total_paid'] >merged_full['price_total'])
promotion_anomalies = merged_full[condition]

print(f"Number of rows where 'promotion' and total_paid < price_total: {len(promotion_anomalies)}")
promotion_anomalies

# in case of delivery_assumption = total_paid > unit_price_total
# difference is total_paid - unit_price_total

#Initialize with "unknown"
merged_full['delivery_assumption'] = "unknown"

#Calculate the difference
delivery_diff = merged_full['total_paid'] - merged_full['unit_price_total']

merged_full.loc[delivery_diff > 0, 'delivery_assumption'] = delivery_diff[delivery_diff > 0]
merged_full.loc[delivery_diff < 0, 'delivery_assumption'] = delivery_diff[delivery_diff < 0]
merged_full.loc[delivery_diff == 0, 'delivery_assumption'] = "no delivery cost"
merged_full

unknown_count = (merged_full['delivery_assumption'] == "unknown").sum()
print(f'Number of "unknown" values: {unknown_count}')
no_delivery_cost = (merged_full['delivery_assumption'] == "no delivery cost").sum()
print(f'Number of "unknown" values: {no_delivery_cost}')

# Count the negative values (only numeric)
negative_count = (merged_full['delivery_assumption'].astype(str).str.contains('-')).sum()

print(f'Number of negative (promotion) values: {negative_count}')

merged_full.info()

"""## 5.&nbsp; Become confident about your dataset

Let's hear your thoughts about what you discovered.
"""

# your thoughts & code here

"""Do not forget to download your quality controlled DataFrames"""

from google.colab import files

#orders_quality_controlled.to_csv("orders_qu.csv", index=False)
#files.download("orders_qu.csv")

#orderlines_quality_controlled.to_csv("orderlines_qu.csv", index=False)
#files.download("orderlines_qu.csv")